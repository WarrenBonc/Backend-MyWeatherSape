const cron = require('node-cron');
const moment = require('moment');
const User = require('../models/User');
const { sendWeatherNotification } = require('./notificationService');

// üïì Ce cron s'ex√©cute toutes les heures pile (ex : 08:00, 09:00...)
// En production, on pr√©f√®re un rythme horaire plut√¥t qu'une fois par minute
cron.schedule('0 * * * *', async () => {
  console.log('üì® V√©rification des notifications m√©t√©o √† envoyer...');

  const now = moment(); // R√©cup√®re l'heure actuelle au format moment
  const currentHour = now.hour(); // Extrait l'heure (ex : 8, 12, 18)

  // D√©terminer √† quelle p√©riode de la journ√©e on est
  let currentSlot = null;
  if (currentHour === 8) currentSlot = 'morning';
  else if (currentHour === 12) currentSlot = 'noon';
  else if (currentHour === 18) currentSlot = 'evening';

  // Si l'heure actuelle ne correspond √† aucun cr√©neau de notification, on ne fait rien
  if (!currentSlot) {
    console.log('‚è© Pas de notification pr√©vue √† cette heure.');
    return;
  }

  try {
    // üîç On r√©cup√®re les utilisateurs qui ont activ√© les notifications pour ce cr√©neau
    const users = await User.find({
      notificationsEnabled: true,
      [`notificationPreferences.${currentSlot}`]: true,
    });

    if (users.length === 0) {
      console.log(`üîï Aucun utilisateur √† notifier pour ${currentSlot}.`);
      return;
    }

    // üì§ Envoie une notification √† chaque utilisateur concern√©
    for (const user of users) {
      if (user.expoPushToken) {
        await sendWeatherNotification(user); // Fonction √† d√©finir dans notificationService.js
        console.log(`‚úÖ Notification envoy√©e √† ${user.firstName} (${currentSlot})`);
      } else {
        console.warn(`‚ö†Ô∏è Aucun token push pour l'utilisateur ${user.firstName}`);
      }
    }
  } catch (error) {
    console.error('‚ùå Erreur lors de l‚Äôenvoi des notifications m√©t√©o :', error);
  }
});